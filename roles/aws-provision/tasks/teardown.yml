---

- name: grab facts for workshop
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      tag:Demo: "{{ec2_name_prefix}}"
  register: all_workshop_nodes
  tags: teardown

- name: debug test
  debug:
    var: all_workshop_nodes
  tags: [never, debug]

- name: "destroy all EC2 instances for {{ ec2_name_prefix }}"
  ec2:
    region: "{{ ec2_region }}"
    state: absent
    instance_ids: "{{ all_workshop_nodes.instances | map(attribute='instance_id') | list }}"
    wait: yes
  register: result
  when: all_workshop_nodes.instances
  tags: teardown

- name: Get the VPC ID for {{ ec2_name_prefix }}
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts
  tags: teardown

- debug: 
    var: vpc_net_facts
  tags: [never, debug]

- name: use set fact for easier variables
  set_fact:
    ec2_vpc_id: "{{vpc_net_facts.vpcs[0].id}}"
  when: vpc_net_facts.vpcs|length > 0 and ec2_security_group is undefined
  tags: teardown

- name: gather facts about security groups for VPC vpc-{{ ec2_name_prefix }}
  ec2_group_info:
    region: "{{ ec2_region }}"
    filters: 
      vpc-id: "{{ ec2_vpc_id }}"
      tag:Demo: "{{ ec2_name_prefix }}"
  register: group_info 
  tags: teardown

- debug: 
     var: group_info
  tags: [never, debug]

- name: Delete security groups for VPC vpc-{{ ec2_name_prefix }}
  ec2_group:
    group_id: "{{ item.group_id }}"
    region: "{{ ec2_region }}"
    state: absent
#  register: delete_sg
  # until: delete_sg is not failed
  # retries: 50
  loop: "{{ group_info.security_groups }}"
  tags: teardown

- name: gather facts about interfaces
  ec2_eni_info:
    filters:
      "vpc-id": "{{ ec2_vpc_id }}"
    region: "{{ ec2_region }}"
  register: eni_info
  tags: teardown

- debug: 
    var: eni_info
  tags: [never, debug]

- name: "Delete interfaces for {{ ec2_name_prefix }}-vpc"
  ec2_eni:
    eni_id: "{{ item.id }}"
    region: "{{ ec2_region }}"
    state: absent
  loop: "{{ eni_info.network_interfaces }}"
  tags: teardown
    
- name: Delete subnet for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ec2_az}}"
    vpc_id: "{{ ec2_vpc_id }}"
    cidr: "{{ item }}"
    state: absent
  when: vpc_net_facts.vpcs|length > 0
  loop: "{{ ec2_vpc_subnets }}"
  tags: teardown

- name: vpc internet gateway is deleted for vpc-{{ ec2_name_prefix }}
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: absent
  when: vpc_net_facts.vpcs|length > 0
  tags: teardown

- name: grab route information for {{ ec2_name_prefix }} on {{ ec2_region }}
  ec2_vpc_route_table_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc_id: "{{ec2_vpc_id}}"
  register: route_table_facts
  when: vpc_net_facts.vpcs|length > 0
  tags: teardown

- name: vpc public subnet route table is deleted
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    route_table_id: "{{item.id}}"
    lookup: id
    state: absent
  with_items: "{{route_table_facts.route_tables}}"
  when: vpc_net_facts.vpcs|length > 0 and item.associations == []
  tags: teardown

- name: delete AWS VPC {{ ec2_name_prefix }}
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block: "{{ ec2_vpc_cidr }}"
    region: "{{ ec2_region }}"
    state: absent
  tags: teardown
